description = "Cucumber-Selenium Test"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath 'net.masterthought:cucumber-reporting:5.3.0'
    }

}


apply plugin: 'java'


group 'selenium-bdd'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

dependencies {
    compile group: 'commons-io', name: 'commons-io', version: '2.8.0'

    testCompile group: 'org.testng', name: 'testng', version: '7.3.0'
    implementation group: 'io.cucumber', name: 'cucumber-jvm', version: '5.7.0'
    implementation group: 'io.cucumber', name: 'cucumber-java', version: '5.7.0'
    implementation group: 'io.cucumber', name: 'cucumber-core', version: '5.7.0'
    implementation group: 'io.cucumber', name: 'cucumber-guice', version: '5.7.0'
    implementation group: 'io.cucumber', name: 'cucumber-testng', version: '5.7.0'

    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    testCompile group: 'junit', name: 'junit', version: '4.13'
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.25'

    compile group: 'com.github.mkolisnyk', name: 'cucumber-runner', version: '1.3.5'
    compile group: 'com.github.mkolisnyk', name: 'cucumber-report-generator', version: '1.3.5'
    compile group: 'com.github.mkolisnyk', name: 'cucumber-reports', version: '1.3.5', ext: 'pom'

    testImplementation group: 'net.masterthought', name: 'cucumber-reporting', version: '5.3.0'

    compile group: 'xerces', name: 'xercesImpl', version: '2.12.0'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'

    // This dependency is required for fixing android-guava Immutable object error:
    // No such method : toImmutableList
    compile group: 'com.google.guava', name: 'guava', version: '28.2-jre'

    // These three dependencies are required if you are running code using Java 8+ version
    compile group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '2.3.3'
    compile group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.3.2'
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    compile group: 'org.reflections', name: 'reflections', version: '0.9.12'
    compile group: 'ru.yandex.qatools.ashot', name: 'ashot', version: '1.5.4'
    compile group: 'net.sf.ucanaccess', name: 'ucanaccess', version: '5.0.0'
    // https://mvnrepository.com/artifact/org.json/json
    compile group: 'org.json', name: 'json', version: '20090211'
}

repositories {
    mavenCentral()
}


configurations.all {
    resolutionStrategy {
        force 'xml-apis:xml-apis:1.4.01'
    }
}

test {
    exclude '**/*'
    testLogging.showStandardStreams = true
}


task cucumberTest(type: Test) {
    systemProperties += System.getProperties()
    testLogging.showStandardStreams = true
    /* without following line gradle is not look for testng classes */
    scanForTestClasses = false
    /**
     * You can only parallel features and can’t parallel scenarios. This it not efficient.
     * Paralleling will be done via processes instead of threads. So you can’t share state between forked jvm’s
     *   so there will be many problems with common system resources. For example you will have problems with
     *   binding ports or with creating file etc.
     * Cucumber runner use testng dataprovider to parallel scenarios.
     * get the thread from props: systemProperties.getOrDefault("thread.count", "${threads}")
     * So we need to pass to jvm -Ddataproviderthreadcount=3 to run tests in 3 threads.
     */
    // number of threads to run
    def threadCount = System.getProperty("thread.count");
    if (threadCount == null || threadCount == "") {
        threadCount = 1;
    }

    //def threads = systemProperties.getOrDefault("thread.count", "${threads}")
    logger.info("Number of threads are: " + threadCount)
    jvmArgs(["-Dtestng.dtd.http=true"])
    jvmArgs(["-Ddataproviderthreadcount=${threadCount}"])
    // enable TestNG support (default is JUnit)
    useTestNG() {
        parallel = 'methods'
        preserveOrder = true
    }

    // turn off Gradle's HTML report to avoid replacing the
    // reports generated by TestNG library:
    reports.html.enabled = false

    outputs.upToDateWhen { false }
}
